#include <iostream>
#include <vector>
#include <string>

using namespace std;


struct Tarea {
    string descripcion;
    string fechaLimite;
    bool completada;

    void imprimirInformacion() const {
        cout << "Descripción: " << descripcion << endl;
        cout << "Fecha Límite: " << fechaLimite << endl;
        cout << "Completada: " << (completada ? "Sí" : "No") << endl;
    }
};


void crearTarea(vector<Tarea>& listaTareas, const string& descripcion, const string& fechaLimite, bool completada);
void leerTareas(const vector<Tarea>& listaTareas);
bool actualizarTarea(vector<Tarea>& listaTareas, const string& descripcion, const string& nuevaFechaLimite, bool nuevaCompletada);
bool eliminarTarea(vector<Tarea>& listaTareas, const string& descripcion);

int main() {
    vector<Tarea> listaTareas;

    
    crearTarea(listaTareas, "Completar proyecto", "2024-06-30", false);
    crearTarea(listaTareas, "Estudiar para el examen", "2024-07-15", false);

   
    cout << "Tareas en la lista:" << endl;
    leerTareas(listaTareas);

    
    if (actualizarTarea(listaTareas, "Completar proyecto", "2024-06-25", true)) {
        cout << "\nTarea actualizada con éxito." << endl;
    } else {
        cout << "\nNo se encontró la tarea a actualizar." << endl;
    }

   
    cout << "\nTareas en la lista después de la actualización:" << endl;
    leerTareas(listaTareas);

    
    if (eliminarTarea(listaTareas, "Estudiar para el examen")) {
        cout << "\nTarea eliminada con éxito." << endl;
    } else {
        cout << "\nNo se encontró la tarea a eliminar." << endl;
    }

    cout << "\nTareas en la lista después de la eliminación:" << endl;
    leerTareas(listaTareas);

    return 0;
}

void crearTarea(vector<Tarea>& listaTareas, const string& descripcion, const string& fechaLimite, bool completada) {
    Tarea nuevaTarea = {descripcion, fechaLimite, completada};
    listaTareas.push_back(nuevaTarea);
}

void leerTareas(const vector<Tarea>& listaTareas) {
    for (const auto& tarea : listaTareas) {
        tarea.imprimirInformacion();
        cout << endl;
    }
}

bool actualizarTarea(vector<Tarea>& listaTareas, const string& descripcion, const string& nuevaFechaLimite, bool nuevaCompletada) {
    for (auto& tarea : listaTareas) {
        if (tarea.descripcion == descripcion) {
            tarea.fechaLimite = nuevaFechaLimite;
            tarea.completada = nuevaCompletada;
            return true;
        }
    }
    return false;
}

bool eliminarTarea(vector<Tarea>& listaTareas, const string& descripcion) {
    for (auto it = listaTareas.begin(); it != listaTareas.end(); ++it) {
        if (it->descripcion == descripcion) {
            listaTareas.erase(it);
            return true;
        }
    }
    return false;
}
